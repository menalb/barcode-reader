@using BookBarcodeReader.Client.Components
@page "/"
@inject IJSRuntime IJSRuntime
@inject HttpClient Http
@using BookBarcodeReader.Shared
@using System.Text.Json
@using BookBarcodeReader.Shared.Book

<section>
    <div class="row p-1">
        <BarcodeReaderComponent GetValue="((value) => SetValue(value))">
        </BarcodeReaderComponent>
    </div>
    <p class="row p-1 form-group">
        <span class="col-6">
            <label for="barcodeInput">Barcode: </label>
            <input id="barcodeInput" @bind="@_barcodeValue" />
        </span>
        <span class="col-2">
            <button type="button" class="btn btn-light" @onclick="searchBarcode">Search</button>
        </span>
        <span class="col-2">
            @if (!string.IsNullOrEmpty(_barcodeValue))
            {
                <button type="button" class="btn btn-light" @onclick="()=> { _addNew = !_addNew; }">Add New</button>
            }
        </span>
        <span class="col-2">
            @if (_cuttentSelected != null)
            {
                <button type="button" class="btn btn-light" @onclick="()=>storeBookFromLookup(_cuttentSelected)">Store</button>
            }
        </span>
    </p>
</section>
@if (_addNew)
{
    <section>
        <AddBookComponent AddBook="(book)=>storeNewBook(book)"></AddBookComponent>
    </section>
}
@if (!string.IsNullOrEmpty(_storeResultMessage))
{
    <section>
        @_storeResultMessage
    </section>
}
<section>

    @if (_isSearching)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <SearchResultComponent searchResult="@results" selectItem="((selectedResult)=> selectedChange(selectedResult))"></SearchResultComponent>
    }
</section>

@code
{
    private string _barcodeValue = string.Empty;
    private Boolean _isSearching = false;
    private Boolean _addNew = false;
    private BarcodeLookupResult[] results;
    private BarcodeLookupResult _cuttentSelected;
    private string _storeResultMessage;

    private void SetValue(string value)
    {
        _barcodeValue = value;
    }

    private async Task searchBarcode()
    {
        _isSearching = true;

        results = await Http.GetFromJsonAsync<BarcodeLookupResult[]>($"BarcodeLookup?barcode={_barcodeValue}");

        _isSearching = false;

    }

    private void selectedChange(BarcodeLookupResult selected)
    {
        _cuttentSelected = selected;
    }

    private async Task storeBookFromLookup(BarcodeLookupResult bookToStore)
    {
        var response = await Http.PostAsJsonAsync<BarcodeLookupResult>("book", bookToStore);
        await ProcessStoreBookResponse(response);
    }

    private async Task storeNewBook(StoreNewBookRequest bookToStore)
    {
        var response = await Http.PostAsJsonAsync<StoreNewBookRequest>("book", bookToStore);
        await ProcessStoreBookResponse(response);
    }

    private async Task ProcessStoreBookResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            };

            var book = JsonSerializer.Deserialize<BookBarcodeReader.Shared.Book.BookEntity>
                (await response.Content.ReadAsStringAsync(), options);
            _storeResultMessage = "Added book: " + book.Id;
        }
        else
        {
            _storeResultMessage = response.StatusCode.ToString();
        }
    }
}
